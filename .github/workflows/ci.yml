name: CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  commitlint:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - name: Install dependencies (for commitlint)
        run: npm ci --ignore-scripts
      - name: Validate commit messages
        uses: wagoid/commitlint-github-action@v6
        with:
          configFile: commitlint.config.cjs

  build-test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node: [18, 20]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'

      - name: Prepare environment vars
        run: |
          echo "PRISMA_SKIP_POSTINSTALL_GENERATE=1" >> $GITHUB_ENV
          echo "DATABASE_URL=mysql://root:root@127.0.0.1:3306/vuki" >> $GITHUB_ENV

      - name: Install dependencies
        run: npm ci --no-audit --no-fund

      - name: Start MySQL service (matrix node ${{ matrix.node }})
        uses: ankane/setup-mysql@v1
        with:
          mysql-version: 8.4
      - name: Configure MySQL database
        run: |
          mysql -uroot -proot -e "CREATE DATABASE IF NOT EXISTS vuki;"
        env:
          MYSQL_HOST: 127.0.0.1
          MYSQL_PWD: root

      # DATABASE_URL already set earlier; keep step ordering consistent

      - name: Prisma generate
        run: npx prisma generate

      - name: Prisma migrate deploy
        run: npx prisma migrate deploy

      - name: Seed database
        run: npm run db:seed
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: Lint
        run: npm run lint

      - name: Test (with coverage)
        run: npm run test:coverage

      - name: Enforce coverage thresholds
        run: node scripts/check-coverage.mjs

      - name: Security audit (prod deps)
        if: matrix.node == 20
        run: node scripts/check-audit.mjs

      - name: Upload coverage (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          # Unique artifact name per Node version to avoid 409 conflicts
          name: coverage-report-node${{ matrix.node }}
          path: coverage

      - name: Upload to Codecov
        # Only run once (Node 20) to reduce duplicate coverage uploads
        if: matrix.node == 20 && (success() || failure())
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # nếu repo public có thể bỏ dòng này
          files: coverage/lcov.info
          verbose: true

      - name: Build
        run: npm run build

  preview-size:
    name: Bundle Size Preview
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Restore Next build cache
        uses: actions/cache@v4
        with:
          path: .next/cache
          key: next-cache-${{ hashFiles('package-lock.json', 'next.config.mjs') }}
          restore-keys: |
            next-cache-

      - name: Build (analyze)
        run: ANALYZE=1 npm run build

      - name: Generate bundle size summary
        run: node scripts/print-bundle-size.mjs

      - name: Upload bundle summary artifact
        uses: actions/upload-artifact@v4
        with:
          name: bundle-size-summary
          path: bundle-size-summary.json

      - name: Comment bundle size on PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summaryPath = 'bundle-size-summary.json';
            if (!fs.existsSync(summaryPath)) {
              core.warning('Không tìm thấy bundle-size-summary.json');
              return;
            }
            const data = JSON.parse(fs.readFileSync(summaryPath, 'utf8'));
            const lines = [];
            lines.push('### 📦 Bundle Size Summary');
            lines.push('\nTổng dung lượng JS: **' + data.totalHuman + '** (' + data.fileCount + ' files)');
            lines.push('\nTop 5 file lớn nhất:');
            data.top.forEach(t => { lines.push(`- ${t.file} : ${t.human}`); });
            lines.push('\n<sub>Generated by CI preview-size job</sub>');
            const body = lines.join('\n');
            // Tìm comment cũ (nếu có) để cập nhật thay vì tạo mới
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const marker = '📦 Bundle Size Summary';
            const existing = comments.find(c => c.user.type === 'Bot' && c.body && c.body.includes(marker));
            if (existing) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existing.id,
                body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body
              });
            }
