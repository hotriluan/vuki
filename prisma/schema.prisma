// Prisma schema for MySQL
// Run: npx prisma migrate dev --name init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Category {
  id        String            @id @default(cuid())
  slug      String            @unique
  name      String
  products  ProductCategory[]
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model Product {
  id          String            @id @default(cuid())
  slug        String            @unique
  name        String
  description String            @db.Text
  price       Int
  salePrice   Int?
  featured    Boolean           @default(false)
  status      ProductStatus     @default(PUBLISHED)
  publishedAt DateTime?         @map("published_at")
  primaryImage String?          @db.VarChar(500)
  images      Json
  stock       Int               @default(0)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  deletedAt   DateTime?         @db.Timestamp(6)
  categories  ProductCategory[]
  variants    ProductVariant[]
  orderItems  OrderItem[]
  media       ProductMedia[]

  @@index([deletedAt])
  @@index([status, publishedAt])
}

enum ProductStatus {
  DRAFT
  PUBLISHED
  SCHEDULED
}

model ProductMedia {
  id         String       @id @default(cuid())
  product    Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String
  url        String       @db.VarChar(1000)
  alt        String?      @db.VarChar(500)
  type       MediaType    @default(IMAGE)
  position   Int          @default(0)
  isPrimary  Boolean      @default(false)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  @@index([productId])
  @@unique([productId, position])
}

enum MediaType {
  IMAGE
  VIDEO
}

model ProductVariant {
  id         String      @id @default(cuid())
  label      String
  stock      Int         @default(0)
  priceDiff  Int? // optional price difference vs base product
  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String
  orderItems OrderItem[]
}

// Join table to allow future extra fields (e.g., priority)
model ProductCategory {
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String
  assignedAt DateTime @default(now())

  @@id([productId, categoryId])
}

model BlogPost {
  id          String   @id @default(cuid())
  slug        String   @unique
  title       String
  excerpt     String?  @db.VarChar(500)
  contentHtml String   @db.LongText
  tags        Json?
  publishedAt DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Future stubs
model User {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String?
  passwordHash String
  role         Role     @default(USER)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  orders       Order[]
  sessions     Session[]
}

enum Role {
  USER
  ADMIN
}

model Order {
  id        String      @id @default(cuid())
  user      User?       @relation(fields: [userId], references: [id])
  userId    String?
  status    OrderStatus @default(PENDING)
  total     Int         @default(0)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  items     OrderItem[]
}

model OrderItem {
  id        String          @id @default(cuid())
  order     Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  product   Product         @relation(fields: [productId], references: [id])
  productId String
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  variantId String?
  quantity  Int             @default(1)
  unitPrice Int // snapshot price at order time
  createdAt DateTime        @default(now())
}

enum OrderStatus {
  PENDING
  PAID
  FULFILLED
  CANCELLED
}

model Session {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
  lastSeen  DateTime @updatedAt
}

model AuditLog {
  id        String   @id @default(cuid())
  action    String
  meta      Json
  createdAt DateTime @default(now())

  @@index([createdAt])
  @@index([action])
}
