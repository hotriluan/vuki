// Prisma schema for MySQL
// Run: npx prisma migrate dev --name init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Category {
  id        String            @id @default(cuid())
  slug      String            @unique
  name      String
  products  ProductCategory[]
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model Product {
  id          String            @id @default(cuid())
  slug        String            @unique
  name        String
  description String            @db.Text
  price       Int
  salePrice   Int?
  featured    Boolean           @default(false)
  images      Json
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  categories  ProductCategory[]
  variants    ProductVariant[]
  orderItems  OrderItem[]
}

model ProductVariant {
  id         String      @id @default(cuid())
  label      String
  stock      Int         @default(0)
  priceDiff  Int? // optional price difference vs base product
  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String
  orderItems OrderItem[]
}

// Join table to allow future extra fields (e.g., priority)
model ProductCategory {
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String
  assignedAt DateTime @default(now())

  @@id([productId, categoryId])
}

model BlogPost {
  id          String   @id @default(cuid())
  slug        String   @unique
  title       String
  excerpt     String?  @db.VarChar(500)
  contentHtml String   @db.LongText
  tags        Json?
  publishedAt DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Future stubs
model User {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String?
  passwordHash String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  orders       Order[]
}

model Order {
  id        String      @id @default(cuid())
  user      User?       @relation(fields: [userId], references: [id])
  userId    String?
  status    OrderStatus @default(PENDING)
  total     Int         @default(0)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  items     OrderItem[]
}

model OrderItem {
  id        String          @id @default(cuid())
  order     Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  product   Product         @relation(fields: [productId], references: [id])
  productId String
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  variantId String?
  quantity  Int             @default(1)
  unitPrice Int // snapshot price at order time
  createdAt DateTime        @default(now())
}

enum OrderStatus {
  PENDING
  PAID
  FULFILLED
  CANCELLED
}
